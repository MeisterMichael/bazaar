

.container-fluid
	.row
		.col-xs-12
			%ul.breadcrumb
				%li
					%a{ href: order_admin_index_path }
						%i.fa.fa-angle-left
						Orders

			- if authorized?(@order, controller: Bazaar::OrderAdminController, action: :update )
				.pull-right
					- if @order.review?
						%a.btn.btn-primary{ href: accept_order_admin_path( @order ), data: { method: 'POST' } }
							Accept
						%a.btn.btn-primary{ href: hold_order_admin_path( @order ), data: { method: 'POST' } }
							Hold for Review
						%a.btn.btn-default{ href: reject_order_admin_path( @order ), data: { method: 'POST' } }
							Reject
					- if @order.pre_order? || @order.draft?
						%a.btn.btn-primary{ href: checkout_admin_path( @order, order: { status: 'active' } ), data: { method: 'PUT' } }
							%i.fa.fa-send
							Process


			%h2
				%strong= @order.code
				%small=current_user.to_local_tz(@order.created_at).to_s( :short )

		.col-xs-2


	.row
		.col-xs-12.col-sm-8
			.well.white-well

				.pull-right
					%a{ href: '#', data: { toggle: :modal, target: '#edit_status_modal' } } Edit
				%h4
					Order Details
					%small

						.badge.order_status{ class: @order.status }
							- if @order.pre_order? || @order.draft?
								%i.fa.fa-circle-o
							=@order.status.gsub(/_/,' ')
						.badge.order_payment_status{ class: @order.payment_status }
							- if @order.invoice? || @order.payment_method_captured?
								%i.fa.fa-circle-o
							=@order.payment_status.gsub(/_/,' ')
						- @order.shipments.each do |shipment|
							.badge.order_fulfillment_status{ class: shipment.status }
								shipment
								= shipment.status.gsub(/_/,' ')

				%table.table.table-light.table-bordered{ style: 'margin: 0' }
					%thead
						%tr
							%th Product
							%th{ style: 'width: 80px' } Price
							%th.text-right{ style: 'width: 70px' } Quantity
							%th.text-right{ style: 'width: 100px' } Subtotal
					%tbody
						- @order.order_items.prod.each do |order_item|
							%tr
								%td
									- if ( subscription = order_item.subscription ).present? || ( subscription = order_item.item ).is_a?( Bazaar::Subscription )
										- if authorized?(subscription, controller: Bazaar::SubscriptionAdminController, action: :edit)
											%a{ href: edit_subscription_admin_path( subscription ) }
												= order_item.title
												(#{subscription.code})
										- else
											= order_item.title
											(#{subscription.code})
									- else
										= order_item.title

								%td
									= number_to_currency (order_item.price.to_f / 100)
								%td.text-right
									=order_item.quantity
								%td.text-right= number_to_currency order_item.subtotal.to_f / 100

						%tr
							%td
							%td
							%td
								Subtotal
							%td.text-right
								%strong
									= number_to_currency @order.subtotal.to_f / 100

						%tr
							%td
							%td
							%td
								Discount
								- @order.order_items.discount.each do |order_item|
									- if order_item.item.code.present?
										%div
											%a{ href: bazaar.edit_discount_admin_path( order_item.item ) }=order_item.item.code

							%td.text-right
								%strong
									= @order.discount_formatted

						%tr
							%td
							%td
							%td
								Tax
							%td.text-right
								%strong
									= number_to_currency @order.tax.to_f / 100
						%tr
							%td
							%td
							%td
								Shipping
							%td.text-right
								%strong
									= number_to_currency @order.shipping.to_f / 100
						%tr
							%td
							%td
							%td
								%h5{ style: 'font-weight:bold;' }
									Total
							%td.text-right
								%h5{ style: 'font-weight:bold;' }
									= number_to_currency ( @order.total || 0 ).to_f / 100

				.row
					.col-xs-12.col-md-6.col-lg-8
						%h4
							Customer Notes
						.well
							= raw @order.customer_notes || 'N/A'

					.col-xs-12.col-md-6.col-lg-4
						- if ( refund_amount = @transactions.approved.negative.to_a.sum(&:signed_amount) ) != 0
							%table.table.table-light.table-bordered{ style: 'margin:0;' }
								%tbody
									%tr
										%td
											%h5{ style: 'font-weight:bold;' }
												Paid by Customer
										%td.text-right{ style: 'width: 100px' }
											%h5{ style: 'font-weight:bold;' }
												= number_to_currency ( @transactions.approved.positive.to_a.sum(&:signed_amount) / 100.0 )
									%tr
										%td
											%h5{ style: 'font-weight:bold;' }
												Refunded Amount
										%td.text-right
											%h5{ style: 'font-weight:bold;' }
												= number_to_currency ( refund_amount / 100.0 )
									%tr
										%td
											%h5{ style: 'font-weight:bold;' }
												Net
										%td.text-right
											%h5{ style: 'font-weight:bold;' }
												= number_to_currency ( @transactions.approved.to_a.sum(&:signed_amount) / 100.0 )
						- else
							%table.table.table-light.table-bordered
								%tbody
									%tr
										%td
											%h5{ style: 'font-weight:bold;' }
												Paid by Customer
										%td.text-right{ style: 'width: 100px' }
											%h5{ style: 'font-weight:bold;' }
												= number_to_currency ( @transactions.approved.positive.to_a.sum(&:signed_amount) / 100.0 )
						- if authorized?( @order, controller: Bazaar::OrderAdminController, action: :refund ) && @transactions.approved.to_a.sum(&:signed_amount) > 0
							.text-center
								%a.btn.btn-success{ data: { toggle: :modal, target: '#refund_order' } }
									%i.fa.fa-plus-square
									Refund
			.well.white-well
				- if authorized?(@order, controller: Bazaar::OrderAdminController, action: :update )
					.pull-right
						%a{ href: '#', data: { toggle: :modal, target: '#edit_support_notes_order' } }
							Edit
				%h4
					Support Notes
				=@order.support_notes || 'N/A'

			.well.white-well
				%h4 Transactions
				%table.table.table-light.table-bordered{ style: 'margin: 0;' }
					%thead
						%tr
							%th{ style: 'width: 10em' } Date
							%th{ style: 'width: 10em' } Type
							%th{ style: 'width: 10em' } Status
							%th{ style: 'width: 10em' } Gateway
							%th Reference
							%th.text-right{ style: 'width: 10em' } Amount
							%th{ style: 'width: 4em' } Currency
					%tbody
						- @transaction_history.each do |transaction|
							%tr
								%td
									=current_user.to_local_tz(transaction.created_at).to_s( :short )
								%td
									= transaction.transaction_type
								%td
									= transaction.status
								%td
									= transaction.provider
								%td
									= transaction.reference_code
									- if transaction.credit_card_ending_in
										%small ( **** #{transaction.credit_card_ending_in} )
								%td.text-right
									= number_to_currency (transaction.amount.to_f / 100)
								%td
									= transaction.currency
							- if transaction.message.present?
								%tr
									%td{ colspan: 6 }
										= transaction.message

			.well.white-well
				%h4 Shipments
				%table.table.table-light.table-bordered{ style: 'margin: 0;' }
					%thead
						%tr
							%th{ style: 'width: 9em' } Code
							%th{ style: 'width: 8em' } Status
							%th{ style: 'width: 8em' } Carrier
							%th{ style: 'width: 8em' } Warehouse
							%th{ style: 'width: 15em' } Items
							%th Tracking
					%tbody
						- unless @shipments.present?
							%tr
								%td{ colspan: 6 } - No Shipments -
						- @shipments.each do |shipment|
							%tr
								%td
									%a{ href: bazaar.edit_shipment_admin_path( shipment.id ), style: 'display: block;font-weight: bold;' }
										=shipment.code || 'N/A'
									%small=current_user.to_local_tz(shipment.created_at).to_s( :short )
								%td
									= shipment.status
								%td
									= shipment.carrier || '-'
								%td
									= shipment.warehouse.try(:name) || '-'
								%td
									= raw shipment.shipment_skus.collect{|shipment_sku| "#{shipment_sku.sku.code} x #{shipment_sku.quantity}" }.join('<br/>')
								%td
									- if shipment.tracking_url
										%a{ href: shipment.tracking_url, _target: 'tracking' }
											= shipment.tracking_code || '-'
									- else
										= shipment.tracking_code || '-'
							- shipment.shipment_logs.order( created_at: :desc ).each do |shipment_log|
								%tr
									%td{ colspan: 6, style: 'padding-left: 4em;' }
										#{current_user.to_local_tz(shipment_log.created_at).to_s( :short )} |
										#{shipment_log.subject} | #{shipment_log.details}
										(#{shipment_log.carrier_status})


			- if defined?(Bunyan)
				.well.white-well
					%h4 Timeline

					- if ( events = Bunyan::Event.where( parent_obj: @order ).or( Bunyan::Event.where.not( user_id: nil ).where( user_id: @order.user_id, created_at: Time.at(0)..(@order.created_at + 10.minutes) ) ).or( Bunyan::Event.where( parent_obj: @transactions ) ).where( category: [ 'account', 'ecom' ] ) ).present?
						.row
							.col-sm-12
								%table.table
									- events.order( created_at: :desc ).limit( 20 ).each do |event|
										%tr
											%td
												= event.to_s
											%td
												= time_ago_in_words( event.created_at )
												ago
					- else
						.row
							.col-xs-12
								No Timeline Entries Found
		.col-xs-12.col-sm-4
			- if @order.user.present?
				.well.white-well
					.pull-right
						%a{ href: swell_id.edit_user_admin_path( @order.user ) }
							Edit
					%h5
						Customer
					%div
						%a{ href: swell_id.edit_user_admin_path( @order.user ) }= @order.user.full_name
					%a{ href: swell_id.edit_user_admin_path( @order.user ) }= @order.user.email

			- if @order.respond_to?( :billing_address ) && @order.billing_address.present?
				.well.white-well
					-# .pull-right
						%a{ href: '#', data: { toggle: :modal, target: '#billing_address_modal' } } Edit
					%h5
						Billing Address
					= raw @order.billing_address.to_html


			.well.white-well
				- if authorized?(@order, controller: Bazaar::OrderAdminController, action: :update ) && not( @order.fulfilled? || @order.delivered? )
					.pull-right
						%a{ href: '#', data: { toggle: :modal, target: '#shipping_address_modal' } } Edit
				%h5
					Shipping Address
				= raw @order.shipping_address.to_html

			= render 'fulfillment_tracking'


= render 'bazaar/order_admin/edit_status_modal'
= render 'bazaar/order_admin/refund_modal'
= render 'bazaar/order_admin/support_notes_modal'
= render 'bazaar/order_admin/edit_address_modal', args: { title: 'Shipping Address', attribute: 'shipping_address' }, countries: get_shipping_countries, states: get_shipping_states( @order.shipping_address.geo_country_id )
